using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace string_to_malware
{
    class Program
    {
        static void Main(string[] args)

        {
            //When you run this project it will create an exe from following encoded string to oneart.exe which will print a message 



            // GET code of an exe in to string (base64Encoded)
            // byte[] buffer = File.ReadAllBytes(@"art.exe");
            // string base64Encoded = Convert.ToBase64String(buffer);
            //Console.WriteLine(base64Encoded);
            //Console.ReadLine();

            //Now just paste the code in to string and it will convert that string into exe
            //This is 64 encoded code of an exe which just print "The art of loosing is'nt hard to master"
            string base64Encoded = "TVqQAAMAAAAEAAAA//8" +
                "AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" +
                "AAAAAAAAAAAAAAAAAAgAAAAA4fug4AtAnNIbgBTM0hVGh" +
                "pcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1vZG" +
                "UuDQ0KJAAAAAAAAABQRQAATAEDAHuksfEAAAAAAAAAAOAAIgAL" +
                "ATAAAAgAAAAIAAAAAAAAficAAAAgAAAAQAAAAABAAAAgAAAAAg" +
                "AABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAAAB" +
                "AAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAConAABPAAAAAEAAALwFA" +
                "AAAAAAAAAAAAAAAAAAAAAAAAGAAAAwAAACMJgAAOAAAAAAAAAAAAAAAAAAA" +
                "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAACAAAAAAAAAAAAAA" +
                "ACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAhAcAAAAgAAAACAAAAAIAAAAAAAA" +
                "AAAAAAAAAACAAAGAucnNyYwAAALwFAAAAQAAAAAYAAAAKAAAAAAAAAAAAAA" +
                "AAAABAAABALnJlbG9jAAAMAAAAAGAAAAACAAAAEAAAAAAAAAAAAAAAAAAAQA" +
                "AAQgAAAAAAAAAAAAAAAAAAAABeJwAAAAAAAEgAAAACAAUAcCAAABwGAAADAAIAAQA" +
                "ABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE4" +
                "AcgEAAHAoDwAACgAoEAAACiYqIgIoEQAACgAqAAAAQlNKQgEAAQAAAAAADAAAAHY0LjAuMz" +
                "AzMTkAAAAABQBsAAAA0AEAACN+AAA8AgAAZAIAACNTdHJpbmdzAAAAAKAEAABUAAAAI1VTAPQE" +
                "AAAQAAAAI0dVSUQAAAAEBQAAGAEAACNCbG9iAAAAAAAAAAIAAAFHFQAACQAAAAD6ATMAFgAAAQAAA" +
                "BEAAAACAAAAAgAAAAEAAAARAAAADgAAAAEAAAABAAAAAACfAQEAAAAAAAYAFAEnAgYAgQEnAgYASAD1AQ" +
                "8ARwIAAAYAcADdAQYA9wDdAQYA2ADdAQYAaAHdAQYANAHdAQYATQHdAQYAhwDdAQYAXAAIAgYAOgAIA" +
                "gYAuwDdAQYAogCvAQYAWwLRAQYAHwDRAQAAAAANAAAAAAABAAEAAAAQAMkBAQBBAAEAAQBQIAAAAACRA" +
                "NgBLAABAGQgAAAAAIYY7wEGAAIAAAABAFYCCQDvAQEAEQDvAQYAGQDvAQoAKQDvARAAMQDvARAAOQDvA" +
                "RAAQQDvARAASQDvARAAUQDvARAAWQDvARAAYQDvARUAaQDvARAAcQDvARAAeQDvARAAiQAwABoAiQAnA" +
                "B8AgQDvAQYALgALADIALgATADsALgAbAFoALgAjAGMALgArAHQALgAzAHQALgA7AHQALgBDAGMALgBLA" +
                "HoALgBTAHQALgBbAHQALgBjAJIALgBrALwALgBzAMkABIAAAAEAAAAAAAAAAAAAAAAAAQAAAAQAAAAA" +
                "AAAAAAAAACMAFgAAAAAAAAAAQ29uc29sZUFwcDEAPE1vZHVsZT4AbXNjb3JsaWIAQ29uc29sZQBSZWF" +
                "kTGluZQBXcml0ZUxpbmUAR3VpZEF0dHJpYnV0ZQBEZWJ1Z2dhYmxlQXR0cmlidXRlAENvbVZpc2lib" +
                "GVBdHRyaWJ1dGUAQXNzZW1ibHlUaXRsZUF0dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0" +
                "ZQBUYXJnZXRGcmFtZXdvcmtBdHRyaWJ1dGUAQXNzZW1ibHlGaWxlVmVyc2lvbkF0dHJpYnV0ZQBBc3N" +
                "lbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJpYnV0ZQBDb2" +
                "1waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3Nlb" +
                "WJseUNvcHlyaWdodEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVudGltZUNvbXBh" +
                "dGliaWxpdHlBdHRyaWJ1dGUAQ29uc29sZUFwcDEuZXhlAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmc" +
                "AUHJvZ3JhbQBTeXN0ZW0ATWFpbgBTeXN0ZW0uUmVmbGVjdGlvbgAuY3RvcgBTeXN0ZW0uRGlhZ25vc3" +
                "RpY3MAU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2Vyd" +
                "mljZXMARGVidWdnaW5nTW9kZXMAYXJncwBPYmplY3QAAAAAT1QAaABlACAAYQByAHQAIABvAGYAIABsAG8A" +
                "bwBzAGkAbgBnACAAaQBzACcAbgB0ACAAaABhAHIAZAAgAHQAbwAgAG0AYQBzAHQAZQByAAEAAAD/FzqHNP" +
                "LRSaqx5WrnaRQ1AAQgAQEIAyAAAQUgAQEREQQgAQEOBCABAQIEAAEBDgMAAA4It3pcVhk04IkFAAEBHQ4I" +
                "AQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBCAEABwEAAAAAEAEAC0NvbnNvbGVBcH" +
                "AxAAAFAQAAAAAXAQASQ29weXJpZ2h0IMKpICAyMDIxAAApAQAkYmRhNTc4MmYtMTcwMC00NTU0LThjMDgt" +
                "YjRmYWVjN2ExODk0AAAMAQAHMS4wLjAuMAAATQEAHC5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC43LjIBAF" +
                "QOFEZyYW1ld29ya0Rpc3BsYXlOYW1lFC5ORVQgRnJhbWV3b3JrIDQuNy4yAAAAAADaggfRAAAAAAIAAABm" +
                "AAAAxCYAAMQIAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAUlNEU3aQQsHgd2tNrh+H3FuisG0BAAA" +
                "AQzpcVXNlcnNcb3NhbWFcc291cmNlXHJlcG9zXENvbnNvbGVBcHAxXENvbnNvbGVBcHAxXG9ialxEZWJ1Z1" +
                "xDb25zb2xlQXBwMS5wZGIAUicAAAAAAAAAAAAAbCcAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAF4nAAAAAA" +
                "AAAAAAAAAAX0NvckV4ZU1haW4AbXNjb3JlZS5kbGwAAAAAAAAA/yUAIEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" +
                "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" +
                "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAQAAAAIAAAg" +
                "BgAAABQAACAAAAAAAAAAAAAAAAAAAABAAEAAAA4AACAAAAAAAAAAAAAAAAAAAABAAAAAACAAAAAAAAAAAAAAA" +
                "AAAAAAAAABAAEAAABoAACAAAAAAAAAAAAAAAAAAAABAAAAAAC8AwAAkEAAACwDAAAAAAAAAAAAACwDNAAAAFYA" +
                "UwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9BO/+AAABAAAAAQAAAAAAAAABAAAAAAA/AAAAAAAAAAQ" +
                "AAAABAAAAAAAAAAAAAAAAAAAARAAAAAEAVgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAH" +
                "MAbABhAHQAaQBvAG4AAAAAAAAAsASMAgAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAABoAgAAAQAwAD" +
                "AAMAAwADAANABiADAAAAAaAAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABhAG4AeQBOAG" +
                "EAbQBlAAAAAAAAAAAAQAAMAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAEMAbwBuAHMAbwBsAG" +
                "UAQQBwAHAAMQAAADAACAABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgAwAC4AMAAAAEAAEAABAE" +
                "kAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAQwBvAG4AcwBvAGwAZQBBAHAAcAAxAC4AZQB4AGUAAABIABIAAQBMAGU" +
                "AZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgAdAAgAKkAIAAgADIAMAAyADEAAAAqAAEAA" +
                "QBMAGUAZwBhAGwAVAByAGEAZABlAG0AYQByAGsAcwAAAAAAAAAAAEgAEAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbAB" +
                "lAG4AYQBtAGUAAABDAG8AbgBzAG8AbABlAEEAcABwADEALgBlAHgAZQAAADgADAABAFAAcgBvAGQAdQBjAHQATgBhA" +
                "G0AZQAAAAAAQwBvAG4AcwBvAGwAZQBBAHAAcAAxAAAANAAIAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAM" +
                "QAuADAALgAwAC4AMAAAADgACAABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADAALgAwA" +
                "AAAzEMAAOoBAAAAAAAAAAAAAO+7vzw/eG1sIHZlcnNpb249IjEuMCIgZW5jb2Rpbmc9IlVURi04IiBzdGFuZGFsb25lP" +
                "SJ5ZXMiPz4NCg0KPGFzc2VtYmx5IHhtbG5zPSJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOmFzbS52MSIgbWFuaWZlc3" +
                "RWZXJzaW9uPSIxLjAiPg0KICA8YXNzZW1ibHlJZGVudGl0eSB2ZXJzaW9uPSIxLjAuMC4wIiBuYW1lPSJNeUFwcGxpY2F" +
                "0aW9uLmFwcCIvPg0KICA8dHJ1c3RJbmZvIHhtbG5zPSJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOmFzbS52MiI+DQogIC" +
                "AgPHNlY3VyaXR5Pg0KICAgICAgPHJlcXVlc3RlZFByaXZpbGVnZXMgeG1sbnM9InVybjpzY2hlbWFzLW1pY3Jvc29mdC1j" +
                "b206YXNtLnYzIj4NCiAgICAgICAgPHJlcXVlc3RlZEV4ZWN1dGlvbkxldmVsIGxldmVsPSJhc0ludm9rZXIiIHVpQWNjZXN" +
                "zPSJmYWxzZSIvPg0KICAgICAgPC9yZXF1ZXN0ZWRQcml2aWxlZ2VzPg0KICAgIDwvc2VjdXJpdHk+DQogIDwvdHJ1c3RJbm" +
                "ZvPg0KPC9hc3NlbWJseT4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" +
                "AAAAAAAAAAAAAAAAAAAAAAAAAAgAAAMAAAAgDcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" +
                "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" +
                "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" +
                "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" +
                "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" +
                "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" +
                "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" +
                "AAAAAAAAAAAAAAAAAAAAAAAA";

            //The string of payload/malware/other exe can now convert in to executable . No need to download the exe because scanner can be trigger.
            byte[] buffer1 = Convert.FromBase64String(base64Encoded);
            File.WriteAllBytes(@"oneart.exe", buffer1);
            //
        }
    }
}
